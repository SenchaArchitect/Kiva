/*
 * File: app/controller/Loans.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Kiva.controller.Loans', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            main: 'mainview',
            loansList: 'loanlist',
            loanFilter: 'loanfilter',
            searchField: 'searchfield',
            refreshButton: 'button[iconCls=refresh]'
        },

        control: {
            "loanlist": {
                select: 'onListTap'
            },
            "detail": {
                hideanimationstart: 'onDetailHideAnimationStart'
            },
            "searchfield": {
                action: 'onSearch'
            },
            "selectfield": {
                change: 'onSelectChange'
            },
            "button[iconCls=refresh]": {
                tap: 'onRefreshButtonTap'
            }
        }
    },

    onListTap: function(list, loan, options) {
        if (!this.view) {
            this.view = Ext.create('Kiva.view.Detail');
        }

        var view = this.view;
        view.setLoan(loan);

        if (this.getProfile() == "phone") {
            view.setWidth(null);
            view.setHeight('85%');
            view.setTop(null);
            view.setLeft(0);
        }

        if (!view.getParent()) {
            Ext.Viewport.add(view);
        }

        view.show();
    },

    onDetailHideAnimationStart: function(panel) {
        this.getLoansList().deselectAll();
    },

    onSearch: function(textfield, e, options) {
        var field = textfield;

        this.doFilter({
            q: field.getValue()
        });
    },

    onSelectChange: function(selectfield, newValue, oldValue, options) {
        var field = selectfield;

        if (!field.initialized) {
            return;
        }

        var config = {};
        config[field.getName()] = field.getValue();
        this.doFilter(config);
    },

    onRefreshButtonTap: function(button, e, options) {
        var store = Ext.getStore('Loans'),
            hasValue = Boolean(this.getSearchField().getValue().length);

        if (!hasValue) {
            store.clearFilter();
        }

        store.load();
    },

    init: function(application) {
        Ext.getStore('Loans').on({
            scope: this,

            beforeload: this.onBeforeStoreLoad,
            load: this.onStoreLoad
        });
    },

    onBeforeStoreLoad: function() {
        this.getRefreshButton().setDisabled(true);
    },

    onStoreLoad: function() {
        this.getRefreshButton().setDisabled(false);
    },

    doFilter: function(values) {
        var store = Ext.getStore('Loans'),
            filters = [];

        Ext.iterate(values, function(field, value) {
            filters.push({
                property: field,
                value   : value
            });
        });

        store.clearFilter();
        store.filter(filters);
        store.load();
    }

});